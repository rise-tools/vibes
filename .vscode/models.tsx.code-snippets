{
	"vibes-demo-step-1": {
		"prefix": "dd1",
		"body": [
			"import {",
      "  Text,",
      "  YStack,",
      "} from '@rise-tools/kitchen-sink/server'",
      "",
      "export const models = {",
      "  home: UI,",
      "}",
      "",
      "export function UI() {",
      "  return (",
      "    <YStack>",
      "      <Text>Hello World</Text>",
      "    </YStack>",
      "  )",
      "}",
      ""
		],
		"description": "Create a React component with models"
	},
	"vibes-demo-step-2": {
    "prefix": "dd2",
    "body": [
      "import {",
      "  navigate,",
      "  StackScreen,",
      "} from '@rise-tools/kit-react-navigation/server'",
      "import {",
      "  Button,",
      "  SizableText,",
      "  Text,",
      "  LucideIcon,",
      "  toast,",
      "  View,",
      "  XStack,",
      "  YStack,",
      "  H1,",
      "} from '@rise-tools/kitchen-sink/server'",
      "import { state, view } from '@rise-tools/server'",
      "import { response } from '@rise-tools/react'",
      "",
      "const TheVibes = [",
      "  { icon: 'üöÄ', theme: 'red' },",
      "  { icon: 'üî•', theme: 'orange' },",
      "  { icon: 'üåä', theme: 'blue' },",
      "  { icon: 'üòç', theme: 'yellow' },",
      "  { icon: 'ü•≥', theme: 'purple' },",
      "  { icon: 'üëè', theme: 'green' },",
      "] as const",
      "",
      "type Vibe = (typeof TheVibes)[number]",
      "",
      "export const models = {",
      "  home: SendVibes,",
      "}",
      "",
      "function SendVibes() {",
      "  return (",
      "    <YStack>",
      "      <Text>Hello World</Text>",
      "    </YStack>",
      "  )",
      "}",
      ""
    ],
    "description": "Create a React component with navigation and vibes"
  },
	"vibes-demo-step-3": {
    "prefix": "dd3",
    "body": [
      "function VibeButton({ vibe }: { vibe: Vibe }) {",
      "  return (",
      "    <Button theme={vibe.theme} size=\"\\$9\">",
      "      {vibe.icon}",
      "    </Button>",
      "  )",
      "}",
      "",
      "function SendVibes() {",
      "  return (",
      "    <YStack flex={1} justifyContent=\"center\">",
      "      <StackScreen title=\"Send Good Vibes\" />",
      "      <H1 margin=\"\\$4\">",
      "        What do you think about Rise Tools?",
      "      </H1>",
      "      <XStack",
      "        flexWrap=\"wrap\"",
      "        gap=\"\\$4\"",
      "        padding=\"\\$4\"",
      "        justifyContent=\"center\"",
      "      >",
      "        {TheVibes.map((vibe) => (",
      "          <VibeButton vibe={vibe} key={vibe.icon} />",
      "        ))}",
      "      </XStack>",
      "    </YStack>",
      "  )",
      "}"
    ],
    "description": "Create VibeButton and SendVibes components"
  },
	"vibes-demo-step-4": {
    "prefix": "dd4",
    "body": [
      "type VibesState = Partial<Record<Vibe['icon'], number>>",
      "const [vibeState, setVibesState] = state<VibesState>({})",
      "",
      "function sendVibe(vibe: Vibe) {",
      "  setVibesState((vibes) => {",
      "    return {",
      "      ...vibes,",
      "      [vibe.icon]: (vibes[vibe.icon] || 0) + 1,",
      "    }",
      "  })",
      "}"
    ],
    "description": "Create VibesState type, state, and sendVibe function"
  },
	"vibes-demo-step-5": {
    "prefix": "dd5",
    "body": [
      "function VibeButton({ vibe }: { vibe: Vibe }) {",
      "  return (",
      "    <Button",
      "      theme={vibe.theme}",
      "      size=\"\\$9\"",
      "      onPress={() => {",
      "        sendVibe(vibe)",
      "        return response(",
      "          toast(`Thanks for the ${vibe.icon}`)",
      "        )",
      "      }}",
      "    >",
      "      {vibe.icon}",
      "    </Button>",
      "  )",
      "}"
    ],
    "description": "Create a VibeButton component with onPress handler"
  },
	"vibes-demo-step-6": {
    "prefix": "dd6",
    "body": [
      "export function VibeResults({",
      "  vibes,",
      "}: {",
      "  vibes?: VibesState",
      "}) {",
      "  if (!vibes) return null",
      "  const mostVibeCount = Math.max(0, ...Object.values(vibes))",
      "  return (",
      "    <YStack flex={1} justifyContent=\"center\">",
      "      <StackScreen title=\"What are the Vibes?\" />",
      "      <YStack>",
      "        {TheVibes.map((vibe) => {",
      "          const vibeCount = vibes?.[vibe.icon] || 0",
      "",
      "          return (",
      "            <XStack",
      "              padding=\"\\$2\"",
      "              alignItems=\"center\"",
      "              justifyContent=\"space-between\"",
      "            >",
      "              <View flex={vibeCount} margin=\"\\$2\">",
      "                <View",
      "                  padding=\"\\$2\"",
      "                  backgroundColor={`\\$${vibe.theme}8`}",
      "                  borderRadius=\"\\$4\"",
      "                >",
      "                  <SizableText size=\"\\$9\">",
      "                    {vibe.icon}",
      "                  </SizableText>",
      "                </View>",
      "              </View>",
      "              <View flex={mostVibeCount - vibeCount} />",
      "              <SizableText size=\"\\$9\" marginHorizontal=\"\\$2\">",
      "                {vibeCount}",
      "              </SizableText>",
      "            </XStack>",
      "          )",
      "        })}",
      "      </YStack>",
      "    </YStack>",
      "  )",
      "}"
    ],
    "description": "Create a VibeResults component to display vibe counts"
  },
	"vibes-demo-step-7": {
    "prefix": "dd7",
    "body": [
      "export const models = {",
      "  home: SendVibes,",
      "  results: view((get) => (",
      "    <VibeResults vibes={get(vibeState)} />",
      "  )),",
      "}"
    ],
    "description": "Export models object with SendVibes and VibeResults components"
  },
	"vibes-demo-step-8": {
    "prefix": "dd8",
    "body": [
      "<XStack padding=\"\\$4\" justifyContent=\"center\">",
      "  <Button",
      "    onPress={navigate('results', {",
      "      headerBackTitle: 'Back',",
      "    })}",
      "    chromeless",
      "    iconAfter={<LucideIcon icon=\"ChevronRight\" />}",
      "  >",
      "    See Results",
      "  </Button>",
      "</XStack>"
    ],
    "description": "Create an XStack with a navigation button to the results screen"
  },
  "vibes-demo-step-0": {
    "prefix": "dd0",
    "body": [
      "import {",
      "  navigate,",
      "  StackScreen,",
      "} from '@rise-tools/kit-react-navigation/server'",
      "import {",
      "  Button,",
      "  SizableText,",
      "  Text,",
      "  LucideIcon,",
      "  toast,",
      "  View,",
      "  XStack,",
      "  YStack,",
      "  H1,",
      "} from '@rise-tools/kitchen-sink/server'",
      "import { state, view } from '@rise-tools/server'",
      "import { response } from '@rise-tools/react'",
      "",
      "const TheVibes = [",
      "  { icon: 'üöÄ', theme: 'red' },",
      "  { icon: 'üî•', theme: 'orange' },",
      "  { icon: 'üåä', theme: 'blue' },",
      "  { icon: 'üòç', theme: 'yellow' },",
      "  { icon: 'ü•≥', theme: 'purple' },",
      "  { icon: 'üëè', theme: 'green' },",
      "] as const",
      "",
      "type Vibe = (typeof TheVibes)[number]",
      "",
      "export const models = {",
      "  home: SendVibes,",
      "  results: view((get) => (",
      "    <VibeResults vibes={get(vibeState)} />",
      "  )),",
      "}",
      "",
      "type VibesState = Partial<Record<Vibe['icon'], number>>",
      "const [vibeState, setVibesState] = state<VibesState>({})",
      "",
      "function sendVibe(vibe: Vibe) {",
      "  setVibesState((vibes) => {",
      "    return {",
      "      ...vibes,",
      "      [vibe.icon]: (vibes[vibe.icon] || 0) + 1,",
      "    }",
      "  })",
      "}",
      "",
      "function VibeButton({ vibe }: { vibe: Vibe }) {",
      "  return (",
      "    <Button",
      "      theme={vibe.theme}",
      "      size=\"\\$9\"",
      "      onPress={() => {",
      "        sendVibe(vibe)",
      "        return response(",
      "          toast(`Thanks for the ${vibe.icon}`)",
      "        )",
      "      }}",
      "    >",
      "      {vibe.icon}",
      "    </Button>",
      "  )",
      "}",
      "",
      "function SendVibes() {",
      "  return (",
      "    <YStack flex={1} justifyContent=\"center\">",
      "      <StackScreen title=\"Send Good Vibes\" />",
      "      <H1 margin=\"\\$4\">",
      "        What do you think about Rise Tools?",
      "      </H1>",
      "      <XStack",
      "        flexWrap=\"wrap\"",
      "        gap=\"\\$4\"",
      "        padding=\"\\$4\"",
      "        justifyContent=\"center\"",
      "      >",
      "        {TheVibes.map((vibe) => (",
      "          <VibeButton vibe={vibe} key={vibe.icon} />",
      "        ))}",
      "      </XStack>",
      "      <XStack padding=\"\\$4\" justifyContent=\"center\">",
      "        <Button",
      "          onPress={navigate('results', {",
      "            headerBackTitle: 'Back',",
      "          })}",
      "          chromeless",
      "          iconAfter={<LucideIcon icon=\"ChevronRight\" />}",
      "        >",
      "          See Results",
      "        </Button>",
      "      </XStack>",
      "    </YStack>",
      "  )",
      "}",
      "",
      "export function VibeResults({",
      "  vibes,",
      "}: {",
      "  vibes?: VibesState",
      "}) {",
      "  if (!vibes) return null",
      "  const mostVibeCount = Math.max(0, ...Object.values(vibes))",
      "  return (",
      "    <YStack flex={1} justifyContent=\"center\">",
      "      <StackScreen title=\"What are the Vibes?\" />",
      "      <YStack>",
      "        {TheVibes.map((vibe) => {",
      "          const vibeCount = vibes?.[vibe.icon] || 0",
      "",
      "          return (",
      "            <XStack",
      "              padding=\"\\$2\"",
      "              alignItems=\"center\"",
      "              justifyContent=\"space-between\"",
      "            >",
      "              <View flex={vibeCount} margin=\"\\$2\">",
      "                <View",
      "                  padding=\"\\$2\"",
      "                  backgroundColor={`\\$${vibe.theme}8`}",
      "                  borderRadius=\"\\$4\"",
      "                >",
      "                  <SizableText size=\"\\$9\">",
      "                    {vibe.icon}",
      "                  </SizableText>",
      "                </View>",
      "              </View>",
      "              <View flex={mostVibeCount - vibeCount} />",
      "              <SizableText size=\"\\$9\" marginHorizontal=\"\\$2\">",
      "                {vibeCount}",
      "              </SizableText>",
      "            </XStack>",
      "          )",
      "        })}",
      "      </YStack>",
      "    </YStack>",
      "  )",
      "}"
    ],
    "description": "Full Vibes App with SendVibes and VibeResults components"
  }
}
